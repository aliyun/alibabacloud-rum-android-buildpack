// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        mavenLocal()
        google()
        mavenCentral()
        gradlePluginPortal()

        // aliyun maven
        // mirror of google()
        maven { url 'https://maven.aliyun.com/repository/google' }
        // mirror of central & jcenter
        maven { url 'https://maven.aliyun.com/repository/public' }
        // mirror of gradlePluginPortal
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
//        classpath "com.android.tools.build:gradle:8.0.2"
        classpath "com.android.tools.build:gradle:4.2.2"
//        classpath "com.android.tools.build:gradle:7.1.2"
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.github.kezong:fat-aar:1.3.8'

        // rum plugin
        classpath "com.aliyun.rum:alibabacloud-android-rum-plugin:0.2.0"
//        classpath "com.aliyun.rum:alibabacloud-android-rum-plugin:0.2.1-beta.1"
    }
}

//plugins {
//    id 'com.android.application' version '8.1.2' apply false
//    id 'com.android.library' version '8.1.2' apply false
//}

plugins {
    id("io.github.gradle-nexus.publish-plugin") version "2.0.0"
}

allprojects { project ->
    apply plugin: 'maven-publish'

    group = 'com.aliyun.rum'
    version = '1.0.5-beta.1'
}

// java library 没有assembleRelease task，这里定义一个，并代理assemble task
task assembleRelease

gradle.projectsEvaluated {
    subprojects { subproject ->
        if (subproject.tasks.findByPath('assemble') != null) {
            if (subproject.plugins.hasPlugin('java-library')) {
                assembleRelease.dependsOn subproject.tasks.assemble
            }
        }
    }
}

HashMap getSonatypeUserAccount() {
    HashMap accountMap = new HashMap()
    def parsedSettingsXml
    def settingsFile = "/home/admin/settings.xml"
    def defaultSettingsFile = System.getProperty("user.home") + "/.m2/settings.xml"

    println("============= getSonatypeUserAccount. settingsFile: ${settingsFile}, exists: ${file(settingsFile).exists()} ============= ")
    println("============= getSonatypeUserAccount. defaultSettingsFile: ${defaultSettingsFile}, exists: ${file(defaultSettingsFile).exists()} ============= ")

    if (file(settingsFile).exists() || file(defaultSettingsFile).exists()) {
        if (file(settingsFile).exists()) {
            println("============= getSonatypeUserAccount. settingsFile exists ============= ")
            parsedSettingsXml = (new XmlParser()).parse(settingsFile);
        } else if (file(defaultSettingsFile).exists()) {
            println("============= getSonatypeUserAccount. defaultSettingsFile exists ============= ")
            parsedSettingsXml = (new XmlParser()).parse(defaultSettingsFile);
        }

        //noinspection GroovyVariableNotAssigned
        parsedSettingsXml.servers[0].server.each { server ->
            if ("releases" == server.id.text()) {
                accountMap.put("id", server.id.text())
                accountMap.put("username", server.username.text())
                accountMap.put("password", server.password.text())
            }
        }
    } else {
        accountMap.put("id", "releases")
        accountMap.put("username", "admin")
        accountMap.put("password", "screct")
    }

    println("============= getSonatypeUserAccount. username: ${accountMap.get("username")}, pswd: ${accountMap.get("password")} ============= ")

    return accountMap

}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/")) //注意地址
            snapshotRepositoryUrl.set(uri("https://central.sonatype.com/repository/maven-snapshots/"))
            packageGroup = "com.aliyun.rum" //groupId，必填
//            packageGroup = "io.github.aliyun-sls" //groupId，必填

//            def accountMap = getSonatypeUserAccount();
//            username = accountMap.get("username")
//            password = accountMap.get("password")
        }
    }

//    useStaging.set(provider {
//        project.nexusPublishing
//        def release = publishing.publications.mavenPublication
//        release.version.endsWith("-SNAPSHOT")


//        val release: MavenPublication by publishing.publications
//        release.version.endsWith("-SNAPSHOT")
//    })
}